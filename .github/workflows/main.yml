name: ClashX

on:
  push:
    tags:
      - '[0-9]+.[0-9]+.[0-9]+'
  workflow_dispatch:

env:
  FASTLANE_SKIP_UPDATE_CHECK: true

permissions:
  contents: write

jobs:
  build:
    runs-on: macos-13
    steps:

    - uses: actions/checkout@v2
      with:
        fetch-depth: 0

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.1'
        bundler-cache: true

    # 临时禁用证书导入，使用自动签名
    # - name: import certs
    #   run: |
    #     echo `/usr/bin/xcodebuild -version`
    #     openssl aes-256-cbc -k  "${{ secrets.ENCRYPTION_SECRET }}" -in ".github/certs/dist.p12.enc" -d -a -out ".github/certs/dist.p12" -md md5
    - name: setup Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.21.x

    - uses: maxim-lobanov/setup-xcode@v1
      with:
        xcode-version: latest-stable

    - name: install deps
      env:
        GIT_TERMINAL_PROMPT: 0
      run: |
        bash install_dependency.sh

    - name: update dev build version
      if: ${{!startsWith(github.ref, 'refs/tags/')}}
      run: |
        tag=`git describe --abbrev=0`.`date '+%m%d%H%M%S'`
        bundle exec fastlane run increment_build_number_in_plist build_number:"${tag}"  scheme:"ClashX"
        bundle exec fastlane run increment_version_number_in_plist version_number:"${tag}"  scheme:"ClashX"
        bundle exec fastlane run set_info_plist_value path:ClashX/Info.plist key:BETA value:true

    - name: update tag build version
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        tag=${GITHUB_REF##*/}
        bundle exec fastlane run set_info_plist_value path:ClashX/Info.plist key:BETA value:false
        bundle exec fastlane run increment_build_number_in_plist build_number:"${tag}"  scheme:"ClashX"
        bundle exec fastlane run increment_version_number_in_plist version_number:"${tag}"  scheme:"ClashX"

    - name: build
      run: |
        cd ClashX
        python3 add_build_info.py
        cd ..

        # Build using xcodebuild directly for better control
        echo "Building ClashX..."
        xcodebuild clean build \
          -workspace ClashX.xcworkspace \
          -scheme ClashX \
          -configuration Release \
          -derivedDataPath ./build_derived_data \
          CODE_SIGN_IDENTITY="-" \
          CODE_SIGNING_REQUIRED=NO \
          CODE_SIGNING_ALLOWED=NO

        # Find the built .app
        echo "Looking for built app..."
        APP_PATH=$(find ./build_derived_data/Build/Products/Release -name "ClashX.app" -type d | head -n 1)

        if [ -z "$APP_PATH" ]; then
          echo "Error: ClashX.app not found!"
          echo "Searching in all build directories..."
          find ./build_derived_data -name "ClashX.app" -type d
          exit 1
        fi

        echo "Found app at: $APP_PATH"
        echo "Copying to root directory..."
        cp -R "$APP_PATH" ./ClashX.app

        # Find and zip the dSYM
        echo "Looking for dSYM..."
        DSYM_PATH=$(find ./build_derived_data/Build/Products/Release -name "ClashX.app.dSYM" -type d | head -n 1)
        if [ -n "$DSYM_PATH" ]; then
          echo "Found dSYM at: $DSYM_PATH"
          echo "Zipping dSYM..."
          ditto -c -k --sequesterRsrc --keepParent "$DSYM_PATH" ClashX.app.dSYM.zip
        else
          echo "Warning: dSYM not found, skipping..."
        fi

        echo "Checking SMJobBless Vailded"
        python3 SMJobBlessUtil.py check ClashX.app || echo "SMJobBless check skipped"
        echo "Build complete!"

    - name: create dmg
      if: startsWith(github.ref, 'refs/tags/') || contains(github.event.head_commit.message, '[beta]')
      run: |
        echo "Checking for ClashX.app..."
        ls -la ClashX.app

        if [ ! -d "ClashX.app" ]; then
          echo "Error: ClashX.app not found!"
          exit 1
        fi

        echo "Creating DMG with hdiutil..."
        # Create a temporary folder for DMG contents
        mkdir -p dmg_temp
        cp -R ClashX.app dmg_temp/

        # Create Applications folder symlink
        ln -s /Applications dmg_temp/Applications

        # Create the DMG
        hdiutil create -volname "ClashX" -srcfolder dmg_temp -ov -format UDZO ClashX.dmg

        # Clean up
        rm -rf dmg_temp

        echo "Checking for created DMG..."
        ls -la ClashX.dmg

        if [ -f "ClashX.dmg" ]; then
          echo "DMG created successfully: ClashX.dmg"
        else
          echo "Error: DMG creation failed!"
          exit 1
        fi

    # 临时禁用公证步骤（需要 Apple Developer 账号）
    # - name: notarize
    #   if: startsWith(github.ref, 'refs/tags/')  || contains(github.event.head_commit.message, '[beta]')
    #   env:
    #     FASTLANE_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
    #     FASTLANE_USER: ${{ secrets.FASTLANE_USER }}
    #     FASTLANE_APPLE_APPLICATION_SPECIFIC_PASSWORD: ${{ secrets.FASTLANE_PASSWORD }}
    #   run: |
    #     bundle exec fastlane run notarize package:"./ClashX.dmg" bundle_id:"com.west2online.ClashX" asc_provider:MEWHFZ92DY

    # 临时禁用 AppCenter 上传（需要配置 token）
    # - name: upload to appcenter
    #   if: startsWith(github.ref, 'refs/tags/') || contains(github.event.head_commit.message, '[beta]')
    #   env:
    #     APPCENTER_DISTRIBUTE_UPLOAD_BUILD_ONLY: true
    #     APPCENTER_DISTRIBUTE_DESTINATIONS: Public
    #     APPCENTER_APP_NAME: ClashX
    #     APPCENTER_API_TOKEN: ${{ secrets.APPCENTER_API_TOKEN }}
    #     APPCENTER_DISTRIBUTE_FILE: ClashX.dmg
    #     APPCENTER_OWNER_NAME: ${{ secrets.APPCENTER_OWNER_NAME }}
    #     APPCENTER_DISTRIBUTE_DSYM: "ClashX.app.dSYM.zip"
    #     APPCENTER_DISTRIBUTE_RELEASE_NOTES: ${{ github.event.head_commit.message }}
    #   run: |
    #     appversion=`defaults read \`pwd\`/ClashX.app/Contents/Info.plist CFBundleShortVersionString`
    #     buildVersion=`defaults read \`pwd\`/ClashX.app/Contents/Info.plist CFBundleVersion`
    #     branch=${GITHUB_REF##*/}
    #     version=$appversion.$branch
    #     bundle exec fastlane run appcenter_upload version:${version} build_number:${buildVersion}

    - name: upload build to github
      uses: softprops/action-gh-release@v1
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        files: |
            ClashX.app.dSYM.zip
            ClashX.dmg
        draft: true
        prerelease: true

    - name: update gitpage
      if: startsWith(github.ref, 'refs/tags/')
      env:
        GITHUB_TOKEN: ${{ secrets.GITPAGE_TOKEN }}
      run: 'curl -u yichengchen:$GITHUB_TOKEN -X POST https://api.github.com/repos/yichengchen/clashX/pages/builds -H "Accept: application/vnd.github.mister-fantastic-preview+json"'
